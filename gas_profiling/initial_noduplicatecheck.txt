Forked the chain on block 20420069
============================= test session starts ==============================
platform darwin -- Python 3.12.4, pytest-8.3.2, pluggy-1.5.0
rootdir: /Users/michael/Documents/projects/vyper_ctf
plugins: cov-5.0.0, hypothesis-6.108.5, web3-6.20.1, anyio-4.4.0, titanoboa-0.2.0
collected 1 item

tests/CurveAssistant/test_load.py Using deployer account: 0x9970BE065e6751AC78Cd07C8E2b54F5D3B88c945
Using cll_contract: <contracts/CurveAssistant.vy at 0x70Ea0d019db59076a5c418Cb6923991D0C371FBB, compiled with vyper-0.4.0+e9db8d9>
<storage: slippage_map={}>
Using contracts: {'USDT': <USDT interface at 0xdAC17F958D2ee523a2206206994597C13D831ec7>, 'USDC': <USDC interface at 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48>, 'WBTC': <WBTC interface at 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599>, 'WETH': <WETH interface at 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2>}
/Users/michael/Documents/projects/vyper_ctf
Minted 10000.0 USDT to 0x9970BE065e6751AC78Cd07C8E2b54F5D3B88c945
Minted 10000.0 USDC to 0x9970BE065e6751AC78Cd07C8E2b54F5D3B88c945
Minted  1.0 WBTC to 0x9970BE065e6751AC78Cd07C8E2b54F5D3B88c945
Minted 10.0 WETH to 0x9970BE065e6751AC78Cd07C8E2b54F5D3B88c945
Balance of Tether USD (0xdAC17F958D2ee523a2206206994597C13D831ec7): deployer: 10000000000, contract: 0
Balance of USD Coin (0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48): deployer: 10000000000, contract: 0
Balance of Wrapped BTC (0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599): deployer: 100000000, contract: 0
Balance of Wrapped Ether (0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2): deployer: 10000000000000000000, contract: 0
[236164214886142416, 201438714560919155, 208149181569820849]
[236164147749257014, 201437613562631615, 208153045664045917]
[236163682164957400, 201436512678264779, 208152413897956435]
[236163216370415776, 201435411888132281, 208151781666008073]
[236162750413371903, 201434311192684150, 208151149010299077]
[236162284223455463, 201433210632666257, 208150515889643896]
[236161817872043866, 201432110168221396, 208149882346135441]
[236161351312371979, 201431009840089167, 208149248338592435]
[236160884568562788, 201429909588271997, 208148613909115040]
[236160417617502669, 201428809473622256, 208147979016515974]
[236163480606143192, 201427709456282756, 208147343702903675]
[236163032015305936, 201426609556823629, 208146707947905378]
[236162583159013525, 201425509775660867, 208146071731165883]
[236162134061476309, 201424410093052092, 208145435094791291]
[236161684699667796, 201423310549711536, 208144798018420312]
[236161235121431825, 201422211085591649, 208144160502510981]
[236160785256508899, 201421111761544733, 208143522547528459]
[236160335176345979, 201420012537666835, 208142884153937729]
[236159884834307596, 201418913434487303, 208142245343031527]
[236159434230983294, 201417814452405774, 208141606073610199]
[236158983390592784, 201416715571660719, 208140966366980119]
[236158532337354957, 201415616812764526, 208140326223600177]
[236158081000993059, 201414518176107284, 208139685664764549]
[236157629429344904, 201413419662046913, 208139044670111359]
[236157177623017429, 201412321270955420, 208138403219289356]
[236156725582583953, 201411222983047856, 208137761354412996]
[236156273285025422, 201410124818840594, 208137119055126274]
[236155820754557820, 201409026778670946, 208136476321905246]
[236155367968151337, 201407928842753641, 208135833155211054]
[236154914950010640, 201406831031585999, 208135189576350877]
[236154461700732351, 201405733345503459, 208134545544133134]
[236154008197290521, 201404635784845330, 208133901079868799]
[236153554463880667, 201403538329805327, 208133256204844828]
[236153100501099975, 201402441000875411, 208132610898712902]
[236152646285923984, 201401343798353577, 208131965161953953]
[236152191842547884, 201400246722583725, 208131318995037200]
[236151737171570857, 201399149753745396, 208130672419260155]
[236151282249952316, 201398052912285347, 208130025393450001]
[236150827101899803, 201396956218683125, 208129377959738552]
[236150371704380836, 201395859632933501, 208128730097767981]
[236149916105219516, 201394763155370433, 208128081808030734]
[236149460257764102, 201393666806425831, 208127433090990155]
[236149004162593469, 201392570586398977, 208126783947129611]
[236148547843907248, 201391474495591918, 208126134397759711]
[236148091302309432, 201390378534290920, 208125484401700578]
[236147634514737650, 201389282682654917, 208124834001089660]
[236147177529023598, 201388186981234918, 208124183196403653]
[236146720274896455, 201387091369907160, 208123531946474769]
[236146262823785141, 201385995909365167, 208122880293435886]
[236145805129029792, 201384900579748016, 208122228216946288]
[236145347191226459, 201383805361183565, 208121575717486794]
[236144889058175034, 201382710274083641, 208120922795541266]
[236144430683222320, 201381615338858782, 208120269451586806]
[236143972066948608, 201380520495341407, 208119615727775500]
[236143513257164872, 201379425804220494, 208118961541272531]
[236143054207203392, 201378331225472520, 208118306955051084]
[236142594917668540, 201377236779481029, 208117651969591860]
[236142135436329126, 201376142466511435, 208116996564558976]
[236141675716561871, 201375048286801016, 208116340740440753]
[236141215758922989, 201373954240591964, 208115684497717841]
[236140755611217720, 201372860307995920, 208115027857711221]
[236140295203183432, 201371766509376846, 208114370779250086]
[236139834606228743, 201370672844984764, 208113713325311364]
[236139373797306808, 201369579315039516, 208113055433897950]
[236138912729773137, 201368485919779908, 208112397126330428]
[236138451475028435, 201367392639280954, 208111738423925042]
[236137989986422630, 201366299514062844, 208111079306339868]
[236137528288130513, 201365206504047877, 208110419794899327]
[236137066380730063, 201364113629606615, 208109759869266370]
[236136604241159974, 201363020890941773, 208109099529932770]
[236136141893624415, 201361928268145288, 208108438798219602]
[236135679338668121, 201360835781537746, 208107777632964295]
[236135216529637912, 201359743451496186, 208107116076318766]
[236134753537944519, 201358651237923329, 208106454128767817]
[236134290340526294, 201357559161165266, 208105791749155298]
[236133826914348046, 201356467221418635, 208105129000462373]
[236133363283575814, 201355375398745046, 208104465820698802]
[236132899448775527, 201354283733612213, 208103802252011900]
[236132435386894851, 201353192185935799, 208103138274074446]
[236131971122111682, 201352100776038774, 208102473887385334]
[236131506631366920, 201351009504098459, 208101809113258919]
[236131041962450398, 201349918370315308, 208101143952197731]
[236130577045074464, 201348827374852067, 208100478363043630]
[236130111950650313, 201347736497759230, 208099812387957703]
[236129646632499598, 201346645779484700, 208099146006602337]
[236129181114795190, 201345555179920068, 208098479240298922]
[236128715398086847, 201344464719373995, 208097812068724938]
[236128249459329588, 201343374398021028, 208097144492386886]
[236127783322675599, 201342284216024443, 208096476532599579]
[236127316965074156, 201341194173534478, 208095808169043790]
[236126850410696315, 201340104250586078, 208095139423042624]
[236126383683699878, 201339014467470489, 208094470274269583]
[236125916713797805, 201337924844480998, 208093800723232392]
[236125449548769397, 201336835341494104, 208093130791254016]
[236124982189166528, 201335745978806848, 208092460458010466]
[236124514635531865, 201334656756550820, 208091789744827600]
[236124046864811563, 201333567674883841, 208091118631390511]
[236123578901156598, 201332478713812807, 208090447118193521]
[236123110745119894, 201331389913744836, 208089775226568053]
[236122642373633022, 201330301234553097, 208089102957019981]
Balance of Tether USD (0xdAC17F958D2ee523a2206206994597C13D831ec7): deployer: 0, contract: 0
Balance of USD Coin (0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48): deployer: 0, contract: 0
Balance of Wrapped BTC (0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599): deployer: 100, contract: 0
Balance of Wrapped Ether (0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2): deployer: 100, contract: 0
.                                                                                                                                             
                                                                                                                                             
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━┳━━━━━━━━┳━━━━━━━━┓
┃ Contract                                             ┃ Computation                    ┃ Count ┃ Mean   ┃ Median ┃ Stdev ┃ Min    ┃ Max    ┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━╇━━━━━━━━╇━━━━━━━━┩
│ Path: contracts                                      │                                │       │        │        │       │        │        │
│ Name: CurveAssistant.vy                              │                                │       │        │        │       │        │        │
│ Address: 0x70Ea0d019db59076a5c418Cb6923991D0C371FBB  │                                │       │        │        │       │        │        │
│                                                      │ load_coins_to_pools            │ 100   │ 433903 │ 432907 │ 8187  │ 432907 │ 512507 │
└──────────────────────────────────────────────────────┴────────────────────────────────┴───────┴────────┴────────┴───────┴────────┴────────┘
                                                                                                                                                                                              
                                                                                                                                                                                              
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━┳━━━━━━━━┳━━━━━━━━┓
┃ Contract                                             ┃ Computation                                                                     ┃ Count ┃ Mean   ┃ Median ┃ Stdev ┃ Min    ┃ Max    ┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━╇━━━━━━━━╇━━━━━━━━┩
│ Path: contracts                                      │                                                                                 │       │        │        │       │        │        │
│ Name: CurveAssistant.vy                              │                                                                                 │       │        │        │       │        │        │
│ Address: 0x70Ea0d019db59076a5c418Cb6923991D0C371FBB  │                                                                                 │ Count │ Mean   │ Median │ Stdev │ Min    │ Max    │
│ ---------------------------------------------------- │ --------------------------------------------------------------------------      │ ----- │ -----  │ -----  │ ----- │ -----  │ -----  │
│ Function:                                            │  49: #             self.seen = True                                             │ 100   │ 324903 │ 324903 │ 0     │ 324903 │ 324903 │
│                                                      │ 121: def convert_to_one(                                                        │ 100   │ 60672  │ 60672  │ 0     │ 60672  │ 60672  │
│                                                      │  64: liq_loader.__init__()                                                      │ 100   │ 5583   │ 5508   │ 750   │ 5508   │ 13008  │
│                                                      │  36:                                                                            │ 100   │ 4472   │ 4472   │ 0     │ 4472   │ 4472   │
│                                                      │  84: # assert not self._detect_duplicates(coins_list), "Duplicate coins provid… │ 100   │ 3519   │ 3519   │ 0     │ 3519   │ 3519   │
│                                                      │  73: coins_list: DynArray,                                                      │ 100   │ 3033   │ 3033   │ 0     │ 3033   │ 3033   │
│                                                      │ 163: pools_list: DynArray,                                                      │ 100   │ 2911   │ 2911   │ 0     │ 2911   │ 2911   │
│                                                      │ 156: return res                                                                 │ 100   │ 1836   │ 1836   │ 0     │ 1836   │ 1836   │
│                                                      │  40: # seen: HashMap # need this hashmap to detect duplicates, kept clean afte… │ 100   │ 1755   │ 1755   │ 0     │ 1755   │ 1755   │
│                                                      │  93: for i: uint256 in range(len(coins_list), bound=utils.MAX_COINS):           │ 100   │ 2490   │ 1694   │ 7960  │ 1694   │ 81294  │
│                                                      │  85: # self._unsee(coins_list)                                                  │ 100   │ 1485   │ 1485   │ 0     │ 1485   │ 1485   │
│                                                      │  39: # mapping for duplicates check                                             │ 100   │ 1294   │ 1294   │ 0     │ 1294   │ 1294   │
│                                                      │  44: # def _detect_duplicates(arr: DynArray) -> bool:                           │ 100   │ 999    │ 999    │ 0     │ 999    │ 999    │
│                                                      │ 105: @external                                                                  │ 100   │ 937    │ 912    │ 250   │ 912    │ 3412   │
│                                                      │ 114: # self._unsee(pools_list)                                                  │ 100   │ 912    │ 912    │ 0     │ 912    │ 912    │
│                                                      │  41: slippage_map: HashMap # for slippage protection                            │ 100   │ 855    │ 855    │ 0     │ 855    │ 855    │
│                                                      │  96: user_allowance: uint256 = staticcall coin_contract.allowance(msg.sender, … │ 100   │ 812    │ 812    │ 0     │ 812    │ 812    │
│                                                      │  95: user_balance: uint256 = staticcall coin_contract.balanceOf(msg.sender)     │ 100   │ 885    │ 785    │ 1000  │ 785    │ 10785  │
│                                                      │  63: def __init__():                                                            │ 100   │ 774    │ 774    │ 0     │ 774    │ 774    │
│                                                      │  91:                                                                            │ 100   │ 756    │ 756    │ 0     │ 756    │ 756    │
│                                                      │  83: # # detect duplicates (clear "seen" mapping to preserve duplicates detect… │ 100   │ 732    │ 732    │ 0     │ 732    │ 732    │
│                                                      │  47: #         element: address = arr                                           │ 100   │ 693    │ 693    │ 0     │ 693    │ 693    │
│                                                      │  78: # validate inputs                                                          │ 100   │ 678    │ 678    │ 0     │ 678    │ 678    │
│                                                      │  92: # validate allowances                                                      │ 100   │ 676    │ 676    │ 0     │ 676    │ 676    │
│                                                      │  35: initializes: coins_converter                                               │ 100   │ 675    │ 675    │ 0     │ 675    │ 675    │
│                                                      │ 122: coins_list: DynArray,                                                      │ 100   │ 606    │ 606    │ 0     │ 606    │ 606    │
│                                                      │ 101: return liq_loader.load_liq(coins_list, amounts_to_use, pools_list)         │ 100   │ 563    │ 563    │ 0     │ 563    │ 563    │
│                                                      │  37:                                                                            │ 100   │ 563    │ 563    │ 0     │ 563    │ 563    │
│                                                      │  75: pools_list: DynArray                                                       │ 100   │ 546    │ 546    │ 0     │ 546    │ 546    │
│                                                      │ 100:                                                                            │ 100   │ 465    │ 465    │ 0     │ 465    │ 465    │
│                                                      │  98: amounts_to_use.append(min(user_balance, coin_amount))                      │ 100   │ 456    │ 456    │ 0     │ 456    │ 456    │
│                                                      │  99: assert user_allowance >= amounts_to_use, "Approve tokens first!"           │ 100   │ 455    │ 455    │ 0     │ 455    │ 455    │
│                                                      │ 118:                                                                            │ 100   │ 435    │ 435    │ 0     │ 435    │ 435    │
│                                                      │  72: def load_coins_to_pools(                                                   │ 100   │ 341    │ 341    │ 0     │ 341    │ 341    │
│                                                      │  77:                                                                            │ 100   │ 336    │ 336    │ 0     │ 336    │ 336    │
│                                                      │  94: coin_contract: IERC20 = IERC20(coins_list)                                 │ 100   │ 290    │ 290    │ 0     │ 290    │ 290    │
│                                                      │ 157:                                                                            │ 100   │ 279    │ 279    │ 0     │ 279    │ 279    │
│                                                      │  90: amounts_to_use: DynArray = []                                              │ 100   │ 268    │ 268    │ 0     │ 268    │ 268    │
│                                                      │  82:                                                                            │ 100   │ 268    │ 268    │ 0     │ 268    │ 268    │
│                                                      │  74: coin_amounts: DynArray,                                                    │ 100   │ 260    │ 260    │ 0     │ 260    │ 260    │
│                                                      │  89:                                                                            │ 100   │ 256    │ 256    │ 0     │ 256    │ 256    │
│                                                      │  88: # self._unsee(pools_list)                                                  │ 100   │ 237    │ 237    │ 0     │ 237    │ 237    │
│                                                      │  81: assert len(pools_list) > 0, "Provide pools to add liquidity to!"           │ 100   │ 234    │ 234    │ 0     │ 234    │ 234    │
│                                                      │  30:                                                                            │ 100   │ 234    │ 234    │ 0     │ 234    │ 234    │
│                                                      │  97: coin_amount: uint256 = coin_amounts                                        │ 100   │ 220    │ 220    │ 0     │ 220    │ 220    │
│                                                      │ 159: @external                                                                  │ 100   │ 207    │ 207    │ 0     │ 207    │ 207    │
│                                                      │ 110: # validate inputs                                                          │ 100   │ 192    │ 192    │ 0     │ 192    │ 192    │
│                                                      │  29: initializes: liq_loader                                                    │ 100   │ 192    │ 192    │ 0     │ 192    │ 192    │
│                                                      │ 113: # assert not self._detect_duplicates(pools_list), "Duplicate pools provid… │ 100   │ 173    │ 173    │ 0     │ 173    │ 173    │
│                                                      │  76: ) -> DynArray:                                                             │ 100   │ 171    │ 171    │ 0     │ 171    │ 171    │
│                                                      │ 104: @nonreentrant                                                              │ 100   │ 171    │ 171    │ 0     │ 171    │ 171    │
│                                                      │ 117:                                                                            │ 100   │ 171    │ 171    │ 0     │ 171    │ 171    │
│                                                      │  66: coins_converter.__init__()                                                 │ 100   │ 168    │ 168    │ 0     │ 168    │ 168    │
│                                                      │  33:                                                                            │ 100   │ 168    │ 168    │ 0     │ 168    │ 168    │
│                                                      │  42:                                                                            │ 100   │ 136    │ 136    │ 0     │ 136    │ 136    │
│                                                      │ 155: self.slippage_map = 0                                                      │ 100   │ 108    │ 108    │ 0     │ 108    │ 108    │
│                                                      │ 119: @nonreentrant                                                              │ 100   │ 75     │ 75     │ 0     │ 75     │ 75     │
│                                                      │ 124: pools_list: DynArray,                                                      │ 100   │ 59     │ 59     │ 0     │ 59     │ 59     │
│                                                      │  46: #     for i: uint256 in range(len(arr), bound=max(utils.MAX_POOLS,utils.M… │ 100   │ 57     │ 57     │ 0     │ 57     │ 57     │
│                                                      │  48: #         if not self.seen:                                                │ 100   │ 57     │ 57     │ 0     │ 57     │ 57     │
│                                                      │  80: assert len(coins_list) == len(coin_amounts), "Provide amounts for coins!"  │ 100   │ 32     │ 32     │ 0     │ 32     │ 32     │
│                                                      │ 107: pools_list: DynArray                                                       │ 100   │ 32     │ 32     │ 0     │ 32     │ 32     │
│                                                      │  79: assert len(coins_list) > 0, "Provide coins to add liquidity!"              │ 100   │ 20     │ 20     │ 0     │ 20     │ 20     │
│                                                      │  51: #             has_duplicates = True                                        │ 100   │ 19     │ 19     │ 0     │ 19     │ 19     │
│                                                      │  67: pass                                                                       │ 100   │ 8      │ 8      │ 0     │ 8      │ 8      │
│                                                      │  68:                                                                            │ 100   │ 8      │ 8      │ 0     │ 8      │ 8      │
│                                                      │  69:                                                                            │ 100   │ 8      │ 8      │ 0     │ 8      │ 8      │
│                                                      │  70: @nonreentrant                                                              │ 100   │ 8      │ 8      │ 0     │ 8      │ 8      │
│                                                      │  71: @external                                                                  │ 100   │ 8      │ 8      │ 0     │ 8      │ 8      │
│                                                      │ 116: return liq_unloader.unload_liq(pools_list)                                 │ 100   │ 6      │ 6      │ 0     │ 6      │ 6      │
└──────────────────────────────────────────────────────┴─────────────────────────────────────────────────────────────────────────────────┴───────┴────────┴────────┴───────┴────────┴────────┘


============================== 1 passed in 50.79s ==============================
