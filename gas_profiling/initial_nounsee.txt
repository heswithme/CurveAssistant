============================= test session starts ==============================
platform darwin -- Python 3.12.4, pytest-8.3.2, pluggy-1.5.0
rootdir: /Users/michael/Documents/projects/vyper_ctf
plugins: cov-5.0.0, hypothesis-6.108.5, web3-6.20.1, anyio-4.4.0, titanoboa-0.2.0
collected 1 item

tests/CurveAssistant/test_load.py F                                      [100%]                                                                                                                                             
                                                                                                                                             
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━┳━━━━━━━━┳━━━━━━━━┓
┃ Contract                                             ┃ Computation                    ┃ Count ┃ Mean   ┃ Median ┃ Stdev ┃ Min    ┃ Max    ┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━╇━━━━━━━━╇━━━━━━━━┩
│ Path: contracts                                      │                                │       │        │        │       │        │        │
│ Name: CurveAssistant.vy                              │                                │       │        │        │       │        │        │
│ Address: 0x70Ea0d019db59076a5c418Cb6923991D0C371FBB  │                                │       │        │        │       │        │        │
│                                                      │ load_coins_to_pools            │ 1     │ 609751 │ 609751 │ 0     │ 609751 │ 609751 │
└──────────────────────────────────────────────────────┴────────────────────────────────┴───────┴────────┴────────┴───────┴────────┴────────┘
                                                                                                                                                                                              
                                                                                                                                                                                              
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━┳━━━━━━━━┳━━━━━━━━┓
┃ Contract                                             ┃ Computation                                                                     ┃ Count ┃ Mean   ┃ Median ┃ Stdev ┃ Min    ┃ Max    ┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━╇━━━━━━━━╇━━━━━━━━┩
│ Path: contracts                                      │                                                                                 │       │        │        │       │        │        │
│ Name: CurveAssistant.vy                              │                                                                                 │       │        │        │       │        │        │
│ Address: 0x70Ea0d019db59076a5c418Cb6923991D0C371FBB  │                                                                                 │ Count │ Mean   │ Median │ Stdev │ Min    │ Max    │
│ ---------------------------------------------------- │ --------------------------------------------------------------------------      │ ----- │ -----  │ -----  │ ----- │ -----  │ -----  │
│ Function:                                            │  49: self.seen = True                                                           │ 1     │ 465393 │ 465393 │ 0     │ 465393 │ 465393 │
│                                                      │ 121: def convert_to_one(                                                        │ 1     │ 60672  │ 60672  │ 0     │ 60672  │ 60672  │
│                                                      │  48: if not self.seen:                                                          │ 1     │ 15373  │ 15373  │ 0     │ 15373  │ 15373  │
│                                                      │  64: liq_loader.__init__()                                                      │ 1     │ 13008  │ 13008  │ 0     │ 13008  │ 13008  │
│                                                      │  95: user_balance: uint256 = staticcall coin_contract.balanceOf(msg.sender)     │ 1     │ 10785  │ 10785  │ 0     │ 10785  │ 10785  │
│                                                      │  36:                                                                            │ 1     │ 4472   │ 4472   │ 0     │ 4472   │ 4472   │
│                                                      │  84: assert not self._detect_duplicates(coins_list), "Duplicate coins provided… │ 1     │ 3614   │ 3614   │ 0     │ 3614   │ 3614   │
│                                                      │ 105: @external                                                                  │ 1     │ 3412   │ 3412   │ 0     │ 3412   │ 3412   │
│                                                      │  73: coins_list: DynArray,                                                      │ 1     │ 3033   │ 3033   │ 0     │ 3033   │ 3033   │
│                                                      │ 163: pools_list: DynArray,                                                      │ 1     │ 2911   │ 2911   │ 0     │ 2911   │ 2911   │
│                                                      │ 156: return res                                                                 │ 1     │ 1836   │ 1836   │ 0     │ 1836   │ 1836   │
│                                                      │  40: seen: HashMap # need this hashmap to detect duplicates, kept clean after … │ 1     │ 1755   │ 1755   │ 0     │ 1755   │ 1755   │
│                                                      │  93: for i: uint256 in range(len(coins_list), bound=utils.MAX_COINS):           │ 1     │ 1694   │ 1694   │ 0     │ 1694   │ 1694   │
│                                                      │  85: #self._unsee(coins_list)                                                   │ 1     │ 1485   │ 1485   │ 0     │ 1485   │ 1485   │
│                                                      │  39: # mapping for duplicates check                                             │ 1     │ 1294   │ 1294   │ 0     │ 1294   │ 1294   │
│                                                      │  47: element: address = arr                                                     │ 1     │ 1078   │ 1078   │ 0     │ 1078   │ 1078   │
│                                                      │  44: def _detect_duplicates(arr: DynArray) -> bool:                             │ 1     │ 999    │ 999    │ 0     │ 999    │ 999    │
│                                                      │ 114: #self._unsee(pools_list)                                                   │ 1     │ 912    │ 912    │ 0     │ 912    │ 912    │
│                                                      │  41: slippage_map: HashMap # for slippage protection                            │ 1     │ 855    │ 855    │ 0     │ 855    │ 855    │
│                                                      │  96: user_allowance: uint256 = staticcall coin_contract.allowance(msg.sender, … │ 1     │ 812    │ 812    │ 0     │ 812    │ 812    │
│                                                      │  63: def __init__():                                                            │ 1     │ 774    │ 774    │ 0     │ 774    │ 774    │
│                                                      │  91:                                                                            │ 1     │ 756    │ 756    │ 0     │ 756    │ 756    │
│                                                      │  83: # detect duplicates (clear "seen" mapping to preserve duplicates detectio… │ 1     │ 732    │ 732    │ 0     │ 732    │ 732    │
│                                                      │  78: # validate inputs                                                          │ 1     │ 678    │ 678    │ 0     │ 678    │ 678    │
│                                                      │  92: # validate allowances                                                      │ 1     │ 676    │ 676    │ 0     │ 676    │ 676    │
│                                                      │  35: initializes: coins_converter                                               │ 1     │ 675    │ 675    │ 0     │ 675    │ 675    │
│                                                      │ 122: coins_list: DynArray,                                                      │ 1     │ 606    │ 606    │ 0     │ 606    │ 606    │
│                                                      │ 101: return liq_loader.load_liq(coins_list, amounts_to_use, pools_list)         │ 1     │ 563    │ 563    │ 0     │ 563    │ 563    │
│                                                      │  37:                                                                            │ 1     │ 563    │ 563    │ 0     │ 563    │ 563    │
│                                                      │  75: pools_list: DynArray                                                       │ 1     │ 546    │ 546    │ 0     │ 546    │ 546    │
│                                                      │  46: for i: uint256 in range(len(arr), bound=max(utils.MAX_POOLS,utils.MAX_COI… │ 1     │ 465    │ 465    │ 0     │ 465    │ 465    │
│                                                      │ 100:                                                                            │ 1     │ 465    │ 465    │ 0     │ 465    │ 465    │
│                                                      │  98: amounts_to_use.append(min(user_balance, coin_amount))                      │ 1     │ 456    │ 456    │ 0     │ 456    │ 456    │
│                                                      │  99: assert user_allowance >= amounts_to_use, "Approve tokens first!"           │ 1     │ 455    │ 455    │ 0     │ 455    │ 455    │
│                                                      │ 118:                                                                            │ 1     │ 435    │ 435    │ 0     │ 435    │ 435    │
│                                                      │  72: def load_coins_to_pools(                                                   │ 1     │ 341    │ 341    │ 0     │ 341    │ 341    │
│                                                      │  77:                                                                            │ 1     │ 336    │ 336    │ 0     │ 336    │ 336    │
│                                                      │  94: coin_contract: IERC20 = IERC20(coins_list)                                 │ 1     │ 290    │ 290    │ 0     │ 290    │ 290    │
│                                                      │ 157:                                                                            │ 1     │ 279    │ 279    │ 0     │ 279    │ 279    │
│                                                      │  82:                                                                            │ 1     │ 268    │ 268    │ 0     │ 268    │ 268    │
│                                                      │  74: coin_amounts: DynArray,                                                    │ 1     │ 260    │ 260    │ 0     │ 260    │ 260    │
│                                                      │  89:                                                                            │ 1     │ 256    │ 256    │ 0     │ 256    │ 256    │
│                                                      │  88: #self._unsee(pools_list)                                                   │ 1     │ 237    │ 237    │ 0     │ 237    │ 237    │
│                                                      │  30:                                                                            │ 1     │ 234    │ 234    │ 0     │ 234    │ 234    │
│                                                      │  81: assert len(pools_list) > 0, "Provide pools to add liquidity to!"           │ 1     │ 229    │ 229    │ 0     │ 229    │ 229    │
│                                                      │  90: amounts_to_use: DynArray = []                                              │ 1     │ 223    │ 223    │ 0     │ 223    │ 223    │
│                                                      │  97: coin_amount: uint256 = coin_amounts                                        │ 1     │ 220    │ 220    │ 0     │ 220    │ 220    │
│                                                      │ 159: @external                                                                  │ 1     │ 207    │ 207    │ 0     │ 207    │ 207    │
│                                                      │ 110: # validate inputs                                                          │ 1     │ 192    │ 192    │ 0     │ 192    │ 192    │
│                                                      │  29: initializes: liq_loader                                                    │ 1     │ 192    │ 192    │ 0     │ 192    │ 192    │
│                                                      │ 113: assert not self._detect_duplicates(pools_list), "Duplicate pools provided… │ 1     │ 173    │ 173    │ 0     │ 173    │ 173    │
│                                                      │  76: ) -> DynArray:                                                             │ 1     │ 171    │ 171    │ 0     │ 171    │ 171    │
│                                                      │ 104: @nonreentrant                                                              │ 1     │ 171    │ 171    │ 0     │ 171    │ 171    │
│                                                      │ 117:                                                                            │ 1     │ 171    │ 171    │ 0     │ 171    │ 171    │
│                                                      │  66: coins_converter.__init__()                                                 │ 1     │ 168    │ 168    │ 0     │ 168    │ 168    │
│                                                      │  33:                                                                            │ 1     │ 168    │ 168    │ 0     │ 168    │ 168    │
│                                                      │  42:                                                                            │ 1     │ 136    │ 136    │ 0     │ 136    │ 136    │
│                                                      │ 155: self.slippage_map = 0                                                      │ 1     │ 108    │ 108    │ 0     │ 108    │ 108    │
│                                                      │  87: assert not self._detect_duplicates(pools_list), "Duplicate pools provided… │ 1     │ 95     │ 95     │ 0     │ 95     │ 95     │
│                                                      │  52: return has_duplicates                                                      │ 1     │ 89     │ 89     │ 0     │ 89     │ 89     │
│                                                      │ 119: @nonreentrant                                                              │ 1     │ 75     │ 75     │ 0     │ 75     │ 75     │
│                                                      │ 124: pools_list: DynArray,                                                      │ 1     │ 59     │ 59     │ 0     │ 59     │ 59     │
│                                                      │  80: assert len(coins_list) == len(coin_amounts), "Provide amounts for coins!"  │ 1     │ 32     │ 32     │ 0     │ 32     │ 32     │
│                                                      │ 107: pools_list: DynArray                                                       │ 1     │ 32     │ 32     │ 0     │ 32     │ 32     │
│                                                      │  79: assert len(coins_list) > 0, "Provide coins to add liquidity!"              │ 1     │ 20     │ 20     │ 0     │ 20     │ 20     │
│                                                      │  51: has_duplicates = True                                                      │ 1     │ 19     │ 19     │ 0     │ 19     │ 19     │
│                                                      │  45: has_duplicates: bool = False                                               │ 1     │ 16     │ 16     │ 0     │ 16     │ 16     │
│                                                      │  67: pass                                                                       │ 1     │ 8      │ 8      │ 0     │ 8      │ 8      │
│                                                      │  68:                                                                            │ 1     │ 8      │ 8      │ 0     │ 8      │ 8      │
│                                                      │  69:                                                                            │ 1     │ 8      │ 8      │ 0     │ 8      │ 8      │
│                                                      │  70: @nonreentrant                                                              │ 1     │ 8      │ 8      │ 0     │ 8      │ 8      │
│                                                      │  71: @external                                                                  │ 1     │ 8      │ 8      │ 0     │ 8      │ 8      │
│                                                      │ 116: return liq_unloader.unload_liq(pools_list)                                 │ 1     │ 6      │ 6      │ 0     │ 6      │ 6      │
└──────────────────────────────────────────────────────┴─────────────────────────────────────────────────────────────────────────────────┴───────┴────────┴────────┴───────┴────────┴────────┘


=================================== FAILURES ===================================
________________________________ test_load_liq _________________________________

deployer = Address('0x9970BE065e6751AC78Cd07C8E2b54F5D3B88c945')
curve_assistant_contract = <contracts/CurveAssistant.vy at 0x70Ea0d019db59076a5c418Cb6923991D0C371FBB, compiled with vyper-0.4.0+e9db8d9>
<storage: seen={}, slippage_map={}>
token_contracts = {'USDC': <USDC interface at 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48>, 'USDT': <USDT interface at 0xdAC17F958D2ee523...at 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599>, 'WETH': <WETH interface at 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2>}
forked_chain = None

    @pytest.mark.gas_profile
    def test_load_liq(deployer, curve_assistant_contract, token_contracts, forked_chain):
        pools_list = ['0x7f86bf177dd4f3494b841a37e810a34dd56c829b', # tricrypto-ng USDC/WBTC/WETH
                      '0xd51a44d3fae010294c616388b506acda1bfaae46', # Curve.fi: USDT/WBTC/WETH Pool (old)
                      '0xf5f5b97624542d72a9e06f04804bf81baa15e2b4', # tricrypto-ng USDT/WBTC/WETH
                    #   '0x4ebdf703948ddcea3b11f675b4d1fba9d2414a14', # tricrv (crvUSD/WETH/CRV)
                      ]
        coins_list = []
        coins_amounts = []
        # prepare approvals, populate input arrays (we use all balance and all tokens deployed)
        N_REP = 100
        for token_contract in token_contracts.values():
            print(f'Balance of {token_contract.name()} ({token_contract.address}): deployer: {token_contract.balanceOf(deployer)}, contract: {token_contract.balanceOf(curve_assistant_contract)}', )
            with boa.env.prank(deployer):
                token_contract.approve(curve_assistant_contract.address, 0, sender = deployer)
                token_contract.approve(curve_assistant_contract.address, token_contract.balanceOf(deployer), sender = deployer)
                # print('current allowance:', contract.allowance(deployer, curve_assistant_contract.address))
                coins_list.append(token_contract.address)
                coins_amounts.append(token_contract.balanceOf(deployer)//N_REP)
        for i in range(N_REP):
            with boa.env.prank(deployer):
                try:
                    res_load = curve_assistant_contract.load_coins_to_pools(coins_list, coins_amounts, pools_list, sender = deployer)
                except Exception as e:
                    print(e)
                    res_load = None
                print(res_load)
>           assert res_load is not None  # we check that function did not revert
E           assert None is not None

tests/CurveAssistant/test_load.py:41: AssertionError
---------------------------- Captured stdout setup -----------------------------
Using deployer account: 0x9970BE065e6751AC78Cd07C8E2b54F5D3B88c945
Using cll_contract: <contracts/CurveAssistant.vy at 0x70Ea0d019db59076a5c418Cb6923991D0C371FBB, compiled with vyper-0.4.0+e9db8d9>
<storage: seen={}, slippage_map={}>
Using contracts: {'USDT': <USDT interface at 0xdAC17F958D2ee523a2206206994597C13D831ec7>, 'USDC': <USDC interface at 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48>, 'WBTC': <WBTC interface at 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599>, 'WETH': <WETH interface at 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2>}
/Users/michael/Documents/projects/vyper_ctf
Minted 10000.0 USDT to 0x9970BE065e6751AC78Cd07C8E2b54F5D3B88c945
Minted 10000.0 USDC to 0x9970BE065e6751AC78Cd07C8E2b54F5D3B88c945
Minted  1.0 WBTC to 0x9970BE065e6751AC78Cd07C8E2b54F5D3B88c945
Minted 10.0 WETH to 0x9970BE065e6751AC78Cd07C8E2b54F5D3B88c945
----------------------------- Captured stdout call -----------------------------
Balance of Tether USD (0xdAC17F958D2ee523a2206206994597C13D831ec7): deployer: 10000000000, contract: 0
Balance of USD Coin (0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48): deployer: 10000000000, contract: 0
Balance of Wrapped BTC (0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599): deployer: 100000000, contract: 0
Balance of Wrapped Ether (0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2): deployer: 10000000000000000000, contract: 0
[236164214886142416, 201438714560919155, 208149181569820849]
Duplicate coins provided!

<contracts/CurveAssistant.vy at 0x70Ea0d019db59076a5c418Cb6923991D0C371FBB, compiled with vyper-0.4.0+e9db8d9>
<storage: seen={}, slippage_map={}>
 <compiler: user revert with reason>

  contract "contracts/CurveAssistant.vy:84", function "load_coins_to_pools", line 84:52 
       83     # detect duplicates (clear "seen" mapping to preserve duplicates detection for future calls)
  ---> 84     assert not self._detect_duplicates(coins_list), "Duplicate coins provided!"
  ------------------------------------------------------------^
       85     #self._unsee(coins_list)
 <locals: coins_list=['0xdAC17F958D2ee523a2206206994597C13D831ec7', '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48', '0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599', '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'], coin_amounts=[100000000, 100000000, 1000000, 100000000000000000], pools_list=['0x7F86Bf177Dd4F3494b841a37e810A34dD56c829B', '0xD51a44d3FaE010294C616388b506AcdA1bfAAE46', '0xf5f5B97624542D72A9E06f04804Bf81baA15e2B4'], amounts_to_use=[25]>
None
=========================== short test summary info ============================
FAILED tests/CurveAssistant/test_load.py::test_load_liq - assert None is not ...
============================== 1 failed in 33.06s ==============================
